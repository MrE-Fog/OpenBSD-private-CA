#!/bin/ksh

#sshd: https:/github.com/vedetta-com/vedetta/blob/master/src/usr/local/share/doc/vedetta/OpenSSH_Principals.md

set -o errexit
set -o nounset

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/root/Bin

BACKUPDIR="/root/Backups/ssh"
SSHDIR="/etc/ssh"
tmpdir=$(mktemp -d)
appdir=$(pwd)
hostname=$(hostname -s)
domainname=$(hostname | sed "s/$(hostname -s).//")
egressinterface=$(ifconfig egress | cut -d  : -f1 | head -n1)
if [ "$hostname" = "cyberanarkhia" ];then
	routerid=$(ifconfig "${egressinterface}" | grep inet |grep -v inet6 | cut -d ' ' -f2)
else
	routerid=$(ifconfig vether0 | grep inet |grep -v inet6 | cut -d ' ' -f2)
fi
publicip=$(ifconfig "${egressinterface}" | grep inet |grep -v inet6 | cut -d ' ' -f2)
UID=$(id -u)

if [[ $UID -ne 0 ]]; then
	print $0 "you've got to run $0 as UID=0 \n"
	exit 1
fi

function error_exit {
    echo "${app}: ${1:-"Unknown Error"}" 1>&2
    exit 1
}

function pidof {
	ps axc -o pid,command | awk "\$2~/^`echo $1`\$/ {print \$1}"
}


if [[ ! -d "$BACKUPDIR" ]]; then
	mkdir "$BACKUPDIR"
fi

install -o root -g wheel -m 0750 src/etc/ssh/sshd_config /etc/ssh
continue=false
echo "waiting for network.."
while [[ "${continue}" == false ]]; do
	[[ "cyberanarkhia.telecom.lobby." == $(dig A web.telecom.lobby +short @172.16.17.106 | head -n 1) ]] && continue=true
done
cd "$SSHDIR"
if [[ ! -e ssh_host_ed25519_key-cert.pub ]]; then
	wget "http://web.telecom.lobby/CA_transfer/$hostname.$domainname/ssh_host_ed25519_key-cert.pub"
else
	rm -rf ssh_host_ed25519_key-cert.pub
	wget "http://web.telecom.lobby/CA_transfer/$hostname.$domainname/ssh_host_ed25519_key-cert.pub"
fi
cd ca
if [[ ! -e ssh_ca_ed25519.pub ]]; then
	wget http://web.telecom.lobby/CA_transfer/ssh_ca_ed25519.pub
else
	rm -rf ssh_ca_ed25519.pub
	wget http://web.telecom.lobby/CA_transfer/ssh_ca_ed25519.pub
fi
cd "$SSHDIR"
if [[ ! -d principals/ ]]; then
	mkdir -m 750 principals/
else
	rm -rf principals/
	mkdir -m 750 principals/
fi
echo "wheel" > principals/taglio
cd "$SSHDIR"
sed -i "s/\/ROUTERID\//$routerid/g" sshd_config
sed -i "s/\/PUBLICIP\//$publicip/g" sshd_config
if [[ -e "$SSHDIR/ssh_host_rsa_key.pub" ]]; then
	mv {ssh_host_dsa_key,ssh_host_dsa_key.pub,ssh_host_ecdsa_key,ssh_host_ecdsa_key.pub,ssh_host_rsa_key,ssh_host_rsa_key.pub} "$BACKUPDIR"
fi
rcctl restart sshd || error_exit "$LINENO: ERROR: sshd failed."
